##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2020 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version='1.0' encoding='utf-8'?>
<xml>
  <id></id>
  <!-- Do not edit id. This will be auto filled while exporting. If you are adding a new script keep the id empty -->
  <version>4</version>
  <!-- Do not edit version. This will be auto incremented while updating. If you are adding a new script you can keep the vresion as 1 -->
  <name>TS_TAD_SetFanMaxOverride</name>
  <!-- If you are adding a new script you can specify the script name. Script Name should be unique same as this file name with out .py extension -->
  <primitive_test_id> </primitive_test_id>
  <!-- Do not change primitive_test_id if you are editing an existing script. -->
  <primitive_test_name>TADstub_Get</primitive_test_name>
  <!--  -->
  <primitive_test_version>3</primitive_test_version>
  <!--  -->
  <status>FREE</status>
  <!--  -->
  <synopsis>To validate the functionality of tr181 parameter Device.Thermal.Fan. by enabling  Device.Thermal.Fan.MaxOverride</synopsis>
  <!--  -->
  <groups_id />
  <!--  -->
  <execution_time>10</execution_time>
  <!--  -->
  <long_duration>false</long_duration>
  <!--  -->
  <advanced_script>false</advanced_script>
  <!-- execution_time is the time out time for test execution -->
  <remarks></remarks>
  <!-- Reason for skipping the tests if marked to skip -->
  <skip>false</skip>
  <!--  -->
  <box_types>
    <box_type>Broadband</box_type>
    <!--  -->
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
    <!--  -->
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_PAM_79</test_case_id>
    <test_objective>This test case will check  if  Fan is enabled ,its speed and status when the Fan Max Override is enabled</test_objective>
    <test_type>Positive</test_type>
    <test_setup>Broadband</test_setup>
    <pre_requisite>1.Ccsp Components in DUT should be in a running state that includes component under test Cable Modem
2.TDK Agent should be in running state or invoke it through StartTdk.sh script
3.The device should have a fan implementation</pre_requisite>
    <api_or_interface_used>
TADstub_Get</api_or_interface_used>
    <input_parameters>Name of the Parameter
Type of the value to be get/set
parameter value to be set/get</input_parameters>
    <automation_approch>1.Function which needs to be tested will be configured in Test Manager GUI.
2.Python Script will be generated by Test Manager with provided arguments in configure page.
3.TM will load the TAD library via Test agent
4.Enable the FAN max Override
5.Get the values of Parameter under Device.Thermal.Fan.
6.Device.Thermal.Fan.Status should be enabled and Device.Thermal.Fan.Speed should be greater than zero,Device.Thermal.Fan.RotorLock to be false.
7.Revert the value back by disabling the Device.Thermal.Fan.Status
8.Test Manager will publish the result in GUI as PASS/FAILURE based on the response from TAD stub.
9.unload the loaded modules</automation_approch>
    <expected_output>On enabling the Fan Max Override the Fan functionalities should start </expected_output>
    <priority>High</priority>
    <test_stub_interface>TAD</test_stub_interface>
    <test_script>TS_TAD_SetFanMaxOverride</test_script>
    <skipped>No</skipped>
    <release_version>M77</release_version>
    <remarks>None</remarks>
  </test_cases>
  <script_tags />
</xml>
'''
# use tdklib library,which provides a wrapper for tdk testcase script
import tdklib;
from time import sleep;
import tdkutility;
from tdkutility import *

#Test component to be tested
obj = tdklib.TDKScriptingLibrary("tad","1");

#IP and Port of box, No need to change,
#This will be replaced with correspoing Box Ip and port while executing script
ip = <ipaddress>
port = <port>
obj.configureTestCase(ip,port,'TS_TAD_SetFanMaxOverride');

loadmodulestatus =obj.getLoadModuleResult();

print "[LIB LOAD STATUS]  :  %s" %loadmodulestatus;

if "SUCCESS" in loadmodulestatus.upper():
    #Set the result status of execution
    obj.setLoadModuleStatus("SUCCESS");

    tdkTestObj = obj.createTestStep('TADstub_SetOnly');
    tdkTestObj.addParameter("ParamName","Device.Thermal.Fan.MaxOverride");
    tdkTestObj.addParameter("ParamValue","true");
    tdkTestObj.addParameter("Type","bool");
    expectedresult="SUCCESS";

    #Execute the test case in DUT
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    details= tdkTestObj.getResultDetails();

    if expectedresult in actualresult:
       print "TEST STEP 1: Set the Fan Max Override to true"
       print "EXPECTED RESULT 1: Should set the Fan Max Override to true"
       print "ACTUAL RESULT 1 : Set was Successfull"
       print "[TEST EXECUTION RESULT] : SUCCESS";
       tdkTestObj.setResultStatus("SUCCESS");

       sleep(5);

       tdkTestObj = obj.createTestStep('TADstub_Get');

       paramList=["Device.Thermal.Fan.Status","Device.Thermal.Fan.Speed","Device.Thermal.Fan.RotorLock","Device.Thermal.Fan.MaxOverride"]
       tdkTestObj,status,orgValue = getMultipleParameterValues(obj,paramList)
       if expectedresult in status:
          print "TEST STEP 2: Get the parameters under Device.Thermal.Fan."
          print "EXPECTED RESULT 2:Should get the parameters under Device.Thermal.Fan."
          print "ACTUAL RESULT 2: Get was successful"
          print "[TEST EXECUTION RESULT] : SUCCESS";
          tdkTestObj.setResultStatus("SUCCESS");

          print "***********************************************************************************************************"
          print "Checking the Fan Speed ,Status,Rotor lock,MaxOverride statuse's after  setting the Fan Max Override to true"
          print "***********************************************************************************************************"


          if orgValue[0] == "true":
             print "TEST STEP 3: Check  for Fan Status"
             print "EXPECTED RESULT 3: Fan status should be true"
             print "ACTUAL RESULT 3: Fan status is ",orgValue[0]
             print "[TEST EXECUTION RESULT] : SUCCESS";
             tdkTestObj.setResultStatus("SUCCESS");

             if int(orgValue[1]) > 0 :
                print "TEST STEP 4: Check  for Fan Speed"
                print "EXPECTED RESULT 4: Fan speed should be greater than zero"
                print "ACTUAL RESULT 4: Fan speed is ",orgValue[1]
                print "[TEST EXECUTION RESULT] : SUCCESS";
                tdkTestObj.setResultStatus("SUCCESS");

                if orgValue[2] == "False":
                   print "TEST STEP 5: Check  for Rotor Lock "
                   print "EXPECTED RESULT 5: Fan Rotor lock  should be false"
                   print "ACTUAL RESULT 5: Fan rotor lock  is ",orgValue[2]
                   print "[TEST EXECUTION RESULT] : SUCCESS";
                   tdkTestObj.setResultStatus("SUCCESS");

                   if orgValue[3] == "false":
                      print "TEST STEP 6: Check  for MaxOverride speed"
                      print "EXPECTED RESULT 6: Fan MaxOverride speed should be false"
                      print "ACTUAL RESULT 6: Fan MaxOverride speed  is ",orgValue[3]
                      print "[TEST EXECUTION RESULT] : SUCCESS";
                      tdkTestObj.setResultStatus("SUCCESS");
                   else:
                       print "TEST STEP 6: Check  for MaxOverride speed"
                       print "EXPECTED RESULT 6: Fan MaxOverride speed should be false"
                       print "ACTUAL RESULT 6: Fan MaxOverride speed  is ",orgValue[3]
                       print "[TEST EXECUTION RESULT] : FAILURE";
                       tdkTestObj.setResultStatus("FAILURE");
                else:
                    print "TEST STEP 5: Check  for Rotor Lock "
                    print "EXPECTED RESULT 5: Fan Rotor lock  should be false"
                    print "ACTUAL RESULT 5: Fan rotor lock  is",orgValue[2]
                    print "[TEST EXECUTION RESULT] : FAILURE";
                    tdkTestObj.setResultStatus("FAILURE");
             else:
                 print "TEST STEP 4: Check  for Fan Speed"
                 print "EXPECTED RESULT 4: Fan speed should be greater than zero"
                 print "ACTUAL RESULT 4: Fan speed is ",orgValue[1]
                 print "[TEST EXECUTION RESULT] : FAILURE";
                 tdkTestObj.setResultStatus("FAILURE");
          else:
              print "TEST STEP 3: Check  for Fan Status"
              print "EXPECTED RESULT 3: Fan status should be true"
              print "ACTUAL RESULT 3: Fan status is ",orgValue[0]
              print "[TEST EXECUTION RESULT] : FAILURE";
              tdkTestObj.setResultStatus("FAILURE");
       else:
           print "TEST STEP 2: Get the parameters under Device.Thermal.Fan."
           print "EXPECTED RESULT 2:Should get the parameters under Device.Thermal.Fan."
           print "ACTUAL RESULT 2: Get Failed"
           print "[TEST EXECUTION RESULT] : FAILURE";
           tdkTestObj.setResultStatus("FAILURE");

       print "Reverting the Fan max override to false to disable the Fan";
       #Revert the value
       tdkTestObj = obj.createTestStep('TADstub_SetOnly');
       tdkTestObj.addParameter("ParamName","Device.Thermal.Fan.MaxOverride");
       tdkTestObj.addParameter("ParamValue","false");
       tdkTestObj.addParameter("Type","bool");
       expectedresult="SUCCESS";

       #Execute the test case in DUT
       tdkTestObj.executeTestCase(expectedresult);
       actualresult = tdkTestObj.getResult();
       details= tdkTestObj.getResultDetails();

       if expectedresult in actualresult:
          print "TEST STEP 7 : Revert the Fan Max Override to previous"
          print "EXPECTED RESULT 7: Should set the Fan Max Override to false"
          print "ACTUAL RESULT 7 : Set was Successfull"
          print "[TEST EXECUTION RESULT] : SUCCESS";
          tdkTestObj.setResultStatus("SUCCESS");
       else:
          print "TEST STEP 7 : Revert the Fan Max Override to previous"
          print "EXPECTED RESULT 7: Should set the Fan Max Override to false"
          print "ACTUAL RESULT 7 : Set was failed"
          print "[TEST EXECUTION RESULT] : FAILURE";
          tdkTestObj.setResultStatus("FAILURE");

    else:
        print "TEST STEP 1: Set the Fan Max Override to true"
        print "EXPECTED RESULT 1: Should set the Fan Max Override to true"
        print "ACTUAL RESULT 1 : Set failed"
        print "[TEST EXECUTION RESULT] : FAILURE";
        tdkTestObj.setResultStatus("FAILURE");
    obj.unloadModule("tad");
else:
    print "Failed to load tad module";
    obj.setLoadModuleStatus("FAILURE");
    print "Module loading failed";

