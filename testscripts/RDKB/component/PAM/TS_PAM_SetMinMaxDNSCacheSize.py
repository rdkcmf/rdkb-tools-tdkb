##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2020 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version='1.0' encoding='utf-8'?>
<xml>
  <id></id>
  <!-- Do not edit id. This will be auto filled while exporting. If you are adding a new script keep the id empty -->
  <version>3</version>
  <!-- Do not edit version. This will be auto incremented while updating. If you are adding a new script you can keep the vresion as 1 -->
  <name>TS_PAM_SetMinMaxDNSCacheSize</name>
  <!-- If you are adding a new script you can specify the script name. Script Name should be unique same as this file name with out .py extension -->
  <primitive_test_id> </primitive_test_id>
  <!-- Do not change primitive_test_id if you are editing an existing script. -->
  <primitive_test_name>pam_Setparams</primitive_test_name>
  <!--  -->
  <primitive_test_version>1</primitive_test_version>
  <!--  -->
  <status>FREE</status>
  <!--  -->
  <synopsis>To set the minimum and maximum value for Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.RabidFramework.DNSCacheSize and verify</synopsis>
  <!--  -->
  <groups_id />
  <!--  -->
  <execution_time>10</execution_time>
  <!--  -->
  <long_duration>false</long_duration>
  <!--  -->
  <advanced_script>false</advanced_script>
  <!-- execution_time is the time out time for test execution -->
  <remarks></remarks>
  <!-- Reason for skipping the tests if marked to skip -->
  <skip>false</skip>
  <!--  -->
  <box_types>
    <box_type>Broadband</box_type>
    <!--  -->
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
    <!--  -->
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_PAM_185</test_case_id>
    <test_objective>This test case will check whether a minimum and maximum value can be set as DNS Cache size </test_objective>
    <test_type>Positive</test_type>
    <test_setup>Broadband</test_setup>
    <pre_requisite>1.Ccsp Components in DUT should be in a running state that includes component under test Cable Modem
2.TDK Agent should be in running state or invoke it through StartTdk.sh script</pre_requisite>
    <api_or_interface_used>pam_GetParameterValues
pam_SetParameterValues</api_or_interface_used>
    <input_parameters>Name of the Parameter
Type of the value to set/get
value to passed for set </input_parameters>
    <automation_approch>1.Function which needs to be tested will be configured in Test Manager GUI.
2.Python Script will be generated by Test Manager with provided arguments in configure page.
3.TM will load the pam  library via Test agent
4.Now get the initial  DNS cache size  and store in a variable.
5. initialise the max value as  32768  and minimum value as 0 .
6.Set the  minimum value as DNS cache size and the parameter should set the value successfully.
7.Set the maximum value as DNS cache size and the parameter should set the value successfully.
7.Revert the value back to initial
8.Test Manager will publish the result in GUI as PASS/FAILURE based on the response from pam stub.
9.unload the loaded modules
</automation_approch>
    <expected_output>The minimum and maximum value should be set as  DNS Cache Size.</expected_output>
    <priority>High</priority>
    <test_stub_interface>PAM</test_stub_interface>
    <test_script>TS_PAM_SetMinMaxDNSCacheSize</test_script>
    <skipped>No</skipped>
    <release_version>M77</release_version>
    <remarks>None</remarks>
  </test_cases>
  <script_tags />
</xml>
'''
#use tdklib library,which provides a wrapper for tdk testcase script
import tdklib;
import random;

#Test component to be tested
obj = tdklib.TDKScriptingLibrary("pam","RDKB");

#IP and Port of box, No need to change,
#This will be replaced with correspoing Box Ip and port while executing script
ip = <ipaddress>
port = <port>
obj.configureTestCase(ip,port,'TS_PAM_SetMinMaxDNSCacheSize');

#Get the result of connection with test component and DUT
loadmodulestatus =obj.getLoadModuleResult();
print "[LIB LOAD STATUS]  :  %s" %loadmodulestatus ;
minValue = 0;
maxValue = 32678;
flag = 0;
if "SUCCESS" in loadmodulestatus.upper():
    obj.setLoadModuleStatus("SUCCESS");

    tdkTestObj = obj.createTestStep('pam_GetParameterValues');
    tdkTestObj.addParameter("ParamName","Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.RabidFramework.DNSCacheSize");
    expectedresult="SUCCESS";

    #Execute the test case in DUT
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    InitialDNSCacheSize = tdkTestObj.getResultDetails();

    if expectedresult in actualresult:
       tdkTestObj.setResultStatus("SUCCESS");
       print "TEST STEP 1: Get the Initial DNS Cache Size";
       print "EXPECTED RESULT 1: Should get the Initial DNS Cache Size";
       print "ACTUAL RESULT 1: Got the Initial DNS Cache Size as",InitialDNSCacheSize;
       #Get the result of execution
       print "[TEST EXECUTION RESULT] : SUCCESS";

       SetValue = minValue;

       tdkTestObj = obj.createTestStep('pam_SetParameterValues');
       tdkTestObj.addParameter("ParamName","Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.RabidFramework.DNSCacheSize");
       tdkTestObj.addParameter("ParamValue",str(SetValue));
       tdkTestObj.addParameter("Type","unsignedint");
       expectedresult="SUCCESS";

       #Execute the test case in DUT
       tdkTestObj.executeTestCase(expectedresult);
       actualresult = tdkTestObj.getResult();
       details = tdkTestObj.getResultDetails();

       if expectedresult in actualresult:
          flag  = 1;
          tdkTestObj.setResultStatus("SUCCESS");
          print "TEST STEP 2: Set the DNS Cache Size to a minimum value";
          print "EXPECTED RESULT 2: Should set the DNS Cache Size to a minimum value";
          print "ACTUAL RESULT 2: Value to be set was",SetValue;
          #Get the result of execution
          print "[TEST EXECUTION RESULT] : SUCCESS";

          SetValue = maxValue;

          tdkTestObj = obj.createTestStep('pam_SetParameterValues');
          tdkTestObj.addParameter("ParamName","Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.RabidFramework.DNSCacheSize");
          tdkTestObj.addParameter("ParamValue",str(SetValue));
          tdkTestObj.addParameter("Type","unsignedint");
          expectedresult="SUCCESS";

          #Execute the test case in DUT
          tdkTestObj.executeTestCase(expectedresult);
          actualresult = tdkTestObj.getResult();
          details = tdkTestObj.getResultDetails();

          if expectedresult in actualresult:
             flag = 1;
             tdkTestObj.setResultStatus("SUCCESS");
             print "TEST STEP 3: Set the DNS Cache Size to a maximun value";
             print "EXPECTED RESULT 3: Should set the DNS Cache Size to a maximum value";
             print "ACTUAL RESULT 3: Value to be set was",SetValue;
             #Get the result of execution
             print "[TEST EXECUTION RESULT] : SUCCESS";

          else:
              tdkTestObj.setResultStatus("FAILURE");
              print "TEST STEP 3: Set the DNS Cache Size to a maximum value";
              print "EXPECTED RESULT 3: Should set the DNS Cache Size to a maximum value";
              print "ACTUAL RESULT 3: Value to be set was",SetValue;
              #Get the result of execution
              print "[TEST EXECUTION RESULT] : FAILURE";

       else:
           tdkTestObj.setResultStatus("FAILURE");
           print "TEST STEP 2: Set the DNS Cache Size to a minimum value";
           print "EXPECTED RESULT 2: Should not set the DNS Cache Size to a minimum value";
           print "ACTUAL RESULT 2: Value to be set was",SetValue;
           #Get the result of execution
           print "[TEST EXECUTION RESULT] :FAILURE";

    else:
        tdkTestObj.setResultStatus("FAILURE");
        print "TEST STEP 1: Get the Initial DNS Cache Size";
        print "EXPECTED RESULT 1: Should get the Initial DNS Cache Size";
        print "ACTUAL RESULT 1: Got the Initial DNS Cache Size as",InitialDNSCacheSize;
        #Get the result of execution
        print "[TEST EXECUTION RESULT] : FAILURE";
    # Reverting the value if it was set
    if flag  == 1 :
       tdkTestObj = obj.createTestStep('pam_SetParameterValues');
       tdkTestObj.addParameter("ParamName","Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.RabidFramework.DNSCacheSize");
       tdkTestObj.addParameter("ParamValue",InitialDNSCacheSize);
       tdkTestObj.addParameter("Type","unsignedint");
       expectedresult="SUCCESS";

       #Execute the test case in DUT
       tdkTestObj.executeTestCase(expectedresult);
       actualresult = tdkTestObj.getResult();
       details = tdkTestObj.getResultDetails();

       if expectedresult in actualresult:
          tdkTestObj.setResultStatus("SUCCESS");
          print "TEST STEP 4: Revert the value to initial ";
          print "EXPECTED RESULT 4: Should revert the value to initial";
          print "ACTUAL RESULT 4: Value to be reverted",InitialDNSCacheSize;
          #Get the result of execution
          print "[TEST EXECUTION RESULT] : SUCCESS";
       else:
           tdkTestObj.setResultStatus("FAILURE");
           print "TEST STEP 4: Revert the value to initial ";
           print "EXPECTED RESULT 4: Should revert the value to initial";
           print "ACTUAL RESULT 4: Value to be reverted",InitialDNSCacheSize;
           #Get the result of execution
           print "[TEST EXECUTION RESULT] : FAILURE";
    obj.unloadModule("pam");
else:
    print "Failed to load pam  module";
    obj.setLoadModuleStatus("FAILURE");
