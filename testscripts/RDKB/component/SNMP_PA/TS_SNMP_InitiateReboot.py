##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2020 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version="1.0" encoding="UTF-8"?><xml>
  <id/>
  <version>1</version>
  <name>TS_SNMP_InitiateReboot</name>
  <primitive_test_id/>
  <primitive_test_name>GetCommString</primitive_test_name>
  <primitive_test_version>1</primitive_test_version>
  <status>FREE</status>
  <synopsis>To verify if the oid 1.3.6.1.2.1.69.1.1.3.0 initiates a  reboot  on the DUT and Consolelog.txt.0 has RDKB_REBOOT marker</synopsis>
  <groups_id/>
  <execution_time>20</execution_time>
  <long_duration>false</long_duration>
  <advanced_script>false</advanced_script>
  <remarks/>
  <skip>false</skip>
  <box_types>
    <box_type>Broadband</box_type>
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_SNMP_PA_42</test_case_id>
    <test_objective>This test case is to check if DUT goes for reboot when initiated via SNMP and check for RDKB_REBOOT marker in Consolelog.txt.0</test_objective>
    <test_type>Positive</test_type>
    <test_setup>Broadband</test_setup>
    <pre_requisite>1.Ccsp Components in DUT should be in a running state that includes component under test Cable Modem
2.TDK Agent should be in running state or invoke it through StartTdk.sh script</pre_requisite>
    <api_or_interface_used>None</api_or_interface_used>
    <input_parameters>SnmpMethod : snmpget
SnmpVersion : -v 2c
OID : 1.3.6.1.2.1.69.1.1.3.0</input_parameters>
    <automation_approch>.Function which needs to be tested will be configured in Test Manager GUI.
2.Python Script will be generated by Test Manager with provided arguments in configure page.
3.TM will load the snmp_pa library via Test agent
4.From python script, invoke SnmpExecuteCmd function in snmplib to get the value of given OID
5.Check for Device uptime and store in the variable
5.SetCommString function in the SNMP_PA stub  will be called from snmplib to get the community string.
6.Check for successful SNMP reboot
7.Check  if the uptime is lesser  than the previously stored uptime
8.Check if the /rdklogs/logs/Consolelog.txt.0 has a RDKB_REBOOT marker
9.Responses from the snmplib will be logged in Script log.
10.After Successful set the device should go for reboot and come online.
11.Validation of  the result is done within the python script and send the result status to Test Manager.
12.Test Manager will publish the result in GUI as PASS/FAILURE based on the response from stub.</automation_approch>
    <expected_output>Snmp  set shoulb be successful and the device should go for a reboot</expected_output>
    <priority>High</priority>
    <test_stub_interface>GetCommString</test_stub_interface>
    <test_script>TS_SNMP_InitiateReboot</test_script>
    <skipped>No</skipped>
    <release_version>M77</release_version>
    <remarks>None</remarks>
  </test_cases>
</xml>

'''
import tdklib;
import snmplib;
from time import sleep;
#Test component to be tested
obj = tdklib.TDKScriptingLibrary("sysutil","RDKB");
obj1 = tdklib.TDKScriptingLibrary("pam","1");
#IP and Port of box, No need to change,
#This will be replaced with correspoing Box Ip and port while executing script
ip = <ipaddress>
port = <port>
obj.configureTestCase(ip,port,'TS_SNMP_InitiateReboot');
obj1.configureTestCase(ip,port,'TS_SNMP_InitiateReboot');

#Get the result of connection with test component and DUT
loadmodulestatus1 =obj.getLoadModuleResult();
print "[LIB LOAD STATUS]  :  %s" %loadmodulestatus1

loadmodulestatus2 =obj.getLoadModuleResult();
print "[LIB LOAD STATUS]  :  %s" %loadmodulestatus2

if "SUCCESS" in loadmodulestatus1.upper() and "SUCCESS" in loadmodulestatus2.upper():
    obj.setLoadModuleStatus("SUCCESS");
    obj1.setLoadModuleStatus("SUCCESS");

    tdkTestObj = obj1.createTestStep('pam_GetParameterValues');
    tdkTestObj.addParameter("ParamName","Device.DeviceInfo.UpTime");
    expectedresult="SUCCESS";

    #Execute the test case in STB
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    Olduptime = tdkTestObj.getResultDetails();

    if expectedresult in actualresult:
        #Set the result status of execution
        tdkTestObj.setResultStatus("SUCCESS");
        print "STEP 1 :Get the uptime";
        print "EXPECTED RESULT 1: Should return the uptime successfully";
        print "ACTUAL RESULT 1:UpTime before reboot is %s" %Olduptime;
        print "[TEST EXECUTION RESULT]: SUCCESS";
        tdkTestObj.setResultStatus("SUCCESS");
        #saving the current state before going for reboot
        obj.saveCurrentState();

        print "Initiating Snmp reboot"

        # Resetting device using snmp command
        #Get the Community String
        communityString = snmplib.getCommunityString(obj,"snmpset");
        #Get the IP Address
        ipaddress = snmplib.getIPAddress(obj);
        ########## Script to Execute the snmp command ###########
        actResponse =snmplib.SnmpExecuteCmd("snmpset", communityString, "-v 2c", "1.3.6.1.2.1.69.1.1.3.0 i 1", ipaddress);
        tdkTestObj = obj.createTestStep('ExecuteCmd');
        tdkTestObj.executeTestCase("SUCCESS");

        print "actResponse:",actResponse

        if "INTEGER: 1" in actResponse:
            print "TEST STEP 2: Check if DUT goes for a reboot when initiated  via SNMP"
            print "EXPECTED RESULT 2: DUT should go for a reboot when initiated  via SNMP"
            print "ACTUAL RESULT  2: DUT went for  a reboot through SNMP"
            print "[TEST EXECUTION RESULT]: SUCCESS";
            tdkTestObj.setResultStatus("SUCCESS");
            #Restore the device state saved before reboot
            obj.restorePreviousStateAfterReboot();

            #Execute the test case in STB
            tdkTestObj = obj1.createTestStep('pam_GetParameterValues');
            tdkTestObj.addParameter("ParamName","Device.DeviceInfo.UpTime");
            tdkTestObj.executeTestCase(expectedresult);
            actualresult = tdkTestObj.getResult();
            afterdetails = tdkTestObj.getResultDetails();
            if expectedresult in actualresult:
               if int(Olduptime)>=int(afterdetails):
                  print "TEST STEP 3: compare the uptime before and after reboot to confirm if the device went for reboot";
                  print "EXPECTED RESULT 3 :Uptime before reboot should be greater than uptime after reboot";
                  print "UpTime after reboot is %s" %afterdetails;
                  print "Successfully updated the uptime after reboot";
                  print "[TEST EXECUTION RESULT] : %s" %actualresult
                  tdkTestObj.setResultStatus("SUCCESS");
                  markerfound = 0;
                  for i in range(1,15):
                      if markerfound == 1:
                         break;
                      else:
                          #Query for the Telemetry Marker
                          query="cat /rdklogs/logs/Consolelog.txt.0 | grep -i \"RDKB_REBOOT:\""
                          print "query:%s" %query
                          tdkTestObj = obj.createTestStep('ExecuteCmd');
                          tdkTestObj.addParameter("command", query)
                          expectedresult="SUCCESS";
                          tdkTestObj.executeTestCase(expectedresult);
                          actualresult = tdkTestObj.getResult();
                          details = tdkTestObj.getResultDetails().strip().replace("\\n","");
                          print "Marker Detail Found fromLog file is: %s "%details;

                          if (len(details) == 0) or details.endswith(":") or "RDKB_REBOOT" not in details:
                              markerfound = 0;
                              sleep(60);
                          else:
                              logMsg = details.split("RDKB_REBOOT:")[1].split(',')[0];
                              markerfound = 1;

                  if expectedresult in actualresult and markerfound == 1:
                     tdkTestObj.setResultStatus("SUCCESS");
                     print "TEST STEP 4: Check for RDKB_REBOOT  Marker";
                     print "EXPECTED RESULT 4: RDKB_REBOOT  Marker should be present";
                     print "ACTUAL RESULT 4:RDKB_REBOOT Marker is %s" %logMsg
                     #Get the result of execution
                     print "[TEST EXECUTION RESULT] : SUCCESS"
                  else:
                     tdkTestObj.setResultStatus("FAILURE");
                     print "TEST STEP 4: Check for RDKB_REBOOT Marker";
                     print "EXPECTED RESULT 4: RDKB_REBOOT  Marker should be present";
                     print "ACTUAL RESULT 4:RDKB_REBOOT Marker is %s" %logMsg
                     #Get the result of execution
                     print "[TEST EXECUTION RESULT] : FAILURE";
               else:
                   tdkTestObj.setResultStatus("FAILURE");
                   print "STEP 3: compare the uptime before and after reboot";
                   print "EXPECTED RESULT 3:Uptime before reboot should be greater than uptime after reboot";
                   print "UpTime after reboot is %s" %afterdetails;
                   print "Failed to update the uptime after reboot"
                   print "[TEST EXECUTION RESULT] :%s" %actualresult;

            else:
                print" TEST STEP : Get the uptime of the device";
                print" EXPECTED  RESULT : Should get the uptime of the device";
                print" ACTUAL RESULT : Failed to get the uptime after reboot"
                print "[TEST EXECUTION RESULT] : FAILURE";
                tdkTestObj.setResultStatus("FAILURE");
        else:
            #Set the result status of execution
            print "TEST STEP 2: Check if DUT goes for a reboot when initiated  via SNMP"
            print "EXPECTED RESULT 2: DUT should go for a reboot when initiated  via SNMP"
            print "ACTUAL RESULT 2: DUT did not go for  a reboot through SNMP"
            print "[TEST EXECUTION RESULT]: FAILURE";
            tdkTestObj.setResultStatus("FAILURE");
    else:
        print "TEST STEP 1 :Get the uptime";
        print "EXPECTED RESULT 1: Should return the uptime successfully";
        print "ACTUAL RESULT 1:UpTime before reboot is %s" %Olduptime;
        print "[TEST EXECUTION RESULT]: FAILURE";
        tdkTestObj.setResultStatus("FAILURE");

    obj.unloadModule("sysutil");
    obj1.unloadModule("pam");
else:
    print "FAILURE to load SNMP_PA /PAM module";
    obj.setLoadModuleStatus("FAILURE");
    obj1.setLoadModuleStatus("FAILURE");
