##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2016 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version='1.0' encoding='utf-8'?>
<xml>
  <id></id>
  <!-- Do not edit id. This will be auto filled while exporting. If you are adding a new script keep the id empty -->
  <version>8</version>
  <!-- Do not edit version. This will be auto incremented while updating. If you are adding a new script you can keep the vresion as 1 -->
  <name>TS_SANITY_Is_CoreCCSP_UP</name>
  <!-- If you are adding a new script you can specify the script name. Script Name should be unique same as this file name with out .py extension -->
  <primitive_test_id></primitive_test_id>
  <!-- Do not change primitive_test_id if you are editing an existing script. -->
  <primitive_test_name>ExecuteCmd</primitive_test_name>
  <!--  -->
  <primitive_test_version>1</primitive_test_version>
  <!--  -->
  <status>FREE</status>
  <!--  -->
  <synopsis>Check if the core ccsp components CR, PandM and PSM are up in the device</synopsis>
  <!--  -->
  <groups_id />
  <!--  -->
  <execution_time>1</execution_time>
  <!--  -->
  <long_duration>false</long_duration>
  <!--  -->
  <advanced_script>false</advanced_script>
  <!-- execution_time is the time out time for test execution -->
  <remarks></remarks>
  <!-- Reason for skipping the tests if marked to skip -->
  <skip>false</skip>
  <!--  -->
  <box_types>
    <box_type>RPI</box_type>
    <box_type>Broadband</box_type>
    <!--  -->
    <box_type>Emulator</box_type>
    <!--  -->
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
    <!--  -->
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_SYSUTIL_5</test_case_id>
    <test_objective>Check if the core ccsp components CR, PandM and PSM are up in the device</test_objective>
    <test_type>Positive</test_type>
    <test_setup>Emulator,XB3</test_setup>
    <pre_requisite>TDK Agent should be in running state or invoke it through StartTdk.sh script</pre_requisite>
    <api_or_interface_used>ExecuteCmd() pam_GetParameterValues()</api_or_interface_used>
    <input_parameters>For ExecuteCmd() - ifconfig | grep -A 1 \"brlan0\" | grep \"inet addr\" | cut -f2 -d ':' | cut -f1 -d ' '

pam_GetParameterValues() - Device.X_CISCO_COM_DeviceControl.LanManagementEntry.1.LanIPAddress</input_parameters>
    <automation_approch>1.Function which needs to be tested will be configured in Test Manager GUI.
2.Python Script will be generated by Test Manager with provided arguments in configure page. 
3.TM will load the sysutil library and pamstub lib via Test agent
4.From python script, invoke ExecuteCmd() stub function to get the brlan0 ip
5.with pamstub's getparamvalue() get Device.X_CISCO_COM_DeviceControl.LanManagementEntry.1.LanIPAddress and compare with above ip
5.Responses from the sysutil stub function will be logged in Agent Console log.
6.pam stub will validate the actual result with the expected result and send the result status to Test Manager.
7.Test Manager will publish the result in GUI as PASS/FAILURE based on the response from pam stub.</automation_approch>
    <except_output>CheckPoint 1:
 The output  should be logged in the Agent console/Component log

CheckPoint 2:
Stub function result should be success and should see corresponding log in the agent console log

CheckPoint 3:
TestManager GUI will publish the result as PASS in Execution/Console page of Test Manager</except_output>
    <priority>High</priority>
    <test_stub_interface>sysutil</test_stub_interface>
    <test_script>TS_SANITY_Is_CoreCCSP_UP</test_script>
    <skipped>No</skipped>
    <release_version></release_version>
    <remarks></remarks>
  </test_cases>
  <script_tags />
</xml>
'''
import tdklib;

#Test component to be tested
sysObj = tdklib.TDKScriptingLibrary("sysutil","RDKB");

#IP and Port of box, No need to change,
#This will be replaced with correspoing Box Ip and port while executing script
ip = <ipaddress>
port = <port>
sysObj.configureTestCase(ip,port,'TS_SANITY_Is_CoreCCSP_UP');

#Get the result of connection with test component and STB
loadmodulestatus =sysObj.getLoadModuleResult();

if "SUCCESS" in loadmodulestatus.upper():
    sysObj.setLoadModuleStatus("SUCCESS");

    #Check the box type
    imagename = sysObj.getDeviceBoxType()
    pattern = "Emulator"
    if pattern in imagename:
	print "Box Type is Emulator"
	prefix = "simu"
    else:
	prefix = "eRT"

    #Check whether Core CCSP component are running
    tdkTestObj = sysObj.createTestStep('ExecuteCmd');
    tdkTestObj.addParameter("command", "dmcli %s getvalues com.cisco.spvtg.ccsp.CR.Name | grep -A 1 value: | cut -f3 -d ':' | tr '\r\n' ' '" %prefix);
    expectedresult="SUCCESS";

    #Execute the test case in STB
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    details = tdkTestObj.getResultDetails().strip();

    if expectedresult in actualresult and "Can't find destination component" not in details:
        #Set the result status of execution
        tdkTestObj.setResultStatus("SUCCESS");
        print "TEST STEP 1: Check if CR is up and running"
        print "EXPECTED RESULT 1: CR should be running"
        print "ACTUAL RESULT 1: CR status is: %s" %details;
        print "[TEST EXECUTION RESULT] : SUCCESS";

        tdkTestObj = sysObj.createTestStep('ExecuteCmd');
        tdkTestObj.addParameter("command",  "pidof CcspPandMSsp");
        tdkTestObj.executeTestCase(expectedresult);
        actualresult = tdkTestObj.getResult();
        details = tdkTestObj.getResultDetails().strip();

        if expectedresult in actualresult and "" != details:
            #Set the result status of execution
            tdkTestObj.setResultStatus("SUCCESS");
            print "TEST STEP 2: Check CcspPandMSsp is up and running";
            print "EXPECTED RESULT 2: CcspPandMSsp should be running"
            print "ACTUAL RESULT 2: PID of CcspPandMSsp: %s" %details;
            print "[TEST EXECUTION RESULT] : SUCCESS";

            tdkTestObj = sysObj.createTestStep('ExecuteCmd');
            tdkTestObj.addParameter("command",  "pidof PsmSsp");
            tdkTestObj.executeTestCase(expectedresult);
            actualresult = tdkTestObj.getResult();
            details = tdkTestObj.getResultDetails().strip();

            if expectedresult in actualresult and "" != details:
                #Set the result status of execution
                tdkTestObj.setResultStatus("SUCCESS");
                print "TEST STEP 3: Check PsmSsp is up and running";
                print "EXPECTED RESULT 3: PsmSsp should be running"
                print "ACTUAL RESULT 3: PID of PsmSsp: %s" %details;
                print "[TEST EXECUTION RESULT] : SUCCESS";

            else:
                tdkTestObj.setResultStatus("FAILURE");
                print "TEST STEP 3: Check PsmSsp is up and running"
                print "EXPECTED RESULT 3: PsmSsp should be running"
                print "ACTUAL RESULT 3: PID of PsmSsp: %s" %details;
                print "[TEST EXECUTION RESULT] : FAILURE";

        else:
            tdkTestObj.setResultStatus("FAILURE");
            print "TEST STEP 2: Check CcspPandMSsp is up and running"
            print "EXPECTED RESULT 2: CcspPandMSsp should be running"
            print "ACTUAL RESULT 2: PID of CcspPandMSsp: %s" %details;
            print "[TEST EXECUTION RESULT] : FAILURE";
    else:
        tdkTestObj.setResultStatus("FAILURE");
        print "TEST STEP 1: Check if CR is up and running"
        print "EXPECTED RESULT 1: CR should be running"
        print "ACTUAL RESULT 1: CR status is: %s" %details;
        print "[TEST EXECUTION RESULT] : FAILURE";
        
    sysObj.unloadModule("sysutil");

else:
        print "Failed to load sysutil module";
        sysObj.setLoadModuleStatus("FAILURE");
        print "Module loading failed";
