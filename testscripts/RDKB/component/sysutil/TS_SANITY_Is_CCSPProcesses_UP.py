##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2018 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version='1.0' encoding='utf-8'?>
<xml>
  <id></id>
  <!-- Do not edit id. This will be auto filled while exporting. If you are adding a new script keep the id empty -->
  <version>3</version>
  <!-- Do not edit version. This will be auto incremented while updating. If you are adding a new script you can keep the vresion as 1 -->
  <name>TS_SANITY_Is_CCSPProcesses_UP</name>
  <!-- If you are adding a new script you can specify the script name. Script Name should be unique same as this file name with out .py extension -->
  <primitive_test_id></primitive_test_id>
  <!-- Do not change primitive_test_id if you are editing an existing script. -->
  <primitive_test_name>ExecuteCmd</primitive_test_name>
  <!--  -->
  <primitive_test_version>1</primitive_test_version>
  <!--  -->
  <status>FREE</status>
  <!--  -->
  <synopsis>Check if the all CCSP processes are up and running in the device</synopsis>
  <!--  -->
  <groups_id />
  <!--  -->
  <execution_time>5</execution_time>
  <!--  -->
  <long_duration>false</long_duration>
  <!--  -->
  <advanced_script>false</advanced_script>
  <!-- execution_time is the time out time for test execution -->
  <remarks></remarks>
  <!-- Reason for skipping the tests if marked to skip -->
  <skip>false</skip>
  <!--  -->
  <box_types>
    <box_type>Broadband</box_type>
    <!--  -->
    <box_type>Emulator</box_type>
    <!--  -->
    <box_type>RPI</box_type>
    <!--  -->
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
    <!--  -->
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_SYSUTIL_6</test_case_id>
    <test_objective>Check if the all CCSP processes are up and running in the device</test_objective>
    <test_type>Positive</test_type>
    <test_setup>Emulator,XB3,RPI</test_setup>
    <pre_requisite>TDK Agent should be in running state or invoke it through StartTdk.sh script</pre_requisite>
    <api_or_interface_used>ExecuteCmd() pam_GetParameterValues()</api_or_interface_used>
    <input_parameters>None</input_parameters>
    <automation_approch>1.Function which needs to be tested will be configured in Test Manager GUI.
2.Python Script will be generated by Test Manager with provided arguments in configure page. 
3.TM will load the sysutil library via Test agent
4.From python script, invoke ExecuteCmd() stub function to get the ccsp processes from the platform property file
5.Using ExecuteCmd(), check if all the ccsp processes are running in device
5.Responses from the sysutil stub function will be logged in Agent Console log.
6.Test Manager will publish the result in GUI as PASS/FAILURE</automation_approch>
    <except_output>All ccsp processes should be up and running</except_output>
    <priority>High</priority>
    <test_stub_interface>sysutil</test_stub_interface>
    <test_script>TS_SANITY_Is_CCSPProcesses_UP</test_script>
    <skipped>No</skipped>
    <release_version>M59</release_version>
    <remarks></remarks>
  </test_cases>
  <script_tags>
    <script_tag>BASIC</script_tag>
    <!--  -->
  </script_tags>
</xml>
'''
# use tdklib library,which provides a wrapper for tdk testcase script 
import tdklib; 
from tdkbVariables import *;

#Test component to be tested
obj = tdklib.TDKScriptingLibrary("sysutil","1");

#IP and Port of box, No need to change,
#This will be replaced with correspoing Box Ip and port while executing script
ip = <ipaddress>
port = <port>
obj.configureTestCase(ip,port,'TS_SANITY_Is_CCSPProcesses_UP');

#Get the result of connection with test component and STB
loadmodulestatus =obj.getLoadModuleResult();

if "SUCCESS" in loadmodulestatus.upper():
    obj.setLoadModuleStatus("SUCCESS");

    tdkTestObj = obj.createTestStep('ExecuteCmd');
    CcspProcess= "sh %s/tdk_utility.sh parseConfigFile CCSP_PROCESS" %TDK_PATH;
    print CcspProcess;
    expectedresult="SUCCESS";
    tdkTestObj.addParameter("command", CcspProcess);
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    CcspProcessList = tdkTestObj.getResultDetails().strip();
    CcspProcessList = CcspProcessList.replace("\\n", "");
    if "Invalid Argument passed" not in CcspProcessList:
        tdkTestObj.setResultStatus("SUCCESS");
        print "TEST STEP 1: Get the list of ccsp processes ";
        print "EXPECTED RESULT 1: Should get the list of ccsp processes";
        print "ACTUAL RESULT 1: %s" %CcspProcessList;
        #Get the result of execution
        print "[TEST EXECUTION RESULT] : SUCCESS"

	CcspProcessList = CcspProcessList.split(",");
        for item in CcspProcessList:
	    command = "pidof %s" %item
            tdkTestObj.addParameter("command", command);
            tdkTestObj.executeTestCase(expectedresult);
            actualresult = tdkTestObj.getResult();
            details = tdkTestObj.getResultDetails().strip();
	    details = details.replace("\\n", "");
	    if expectedresult in actualresult and "" != details:
		tdkTestObj.setResultStatus("SUCCESS");
	        print "Process Name : %s" %item;
		print "PID : %s" %details;
		print "%s with process ID %s is running" %(item,details)
	 	print "[TEST EXECUTION RESULT] : SUCCESS"
	    else:
		tdkTestObj.setResultStatus("FAILURE");
		print "Process Name : %s" %item
		print "%s is not running" %item
		print "[TEST EXECUTION RESULT] : FAILURE"
    else:
	tdkTestObj.setResultStatus("FAILURE");
        print "TEST STEP 1: Get the list of ccsp processes ";
        print "EXPECTED RESULT 1: Should get the list of ccsp processes";
        print "ACTUAL RESULT 1: %s" %CcspProcessList;
        #Get the result of execution
        print "[TEST EXECUTION RESULT] : FAILURE"

    obj.unloadModule("sysutil");

else:
        print "Failed to load sysutil module";
        obj.setLoadModuleStatus("FAILURE");
        print "Module loading failed"; 


