##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2018 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
'''
<?xml version="1.0" encoding="UTF-8"?>
<xml>
  <id/>
  <version>2</version>
  <name>TS_SANITY_Is_All_InterfaceUp</name>
  <primitive_test_id/>
  <primitive_test_name>ExecuteCmd</primitive_test_name>
  <primitive_test_version>1</primitive_test_version>
  <status>FREE</status>
  <synopsis>To check whether all the interfaces are up or not</synopsis>
  <groups_id/>
  <execution_time>5</execution_time>
  <long_duration>false</long_duration>
  <advanced_script>false</advanced_script>
  <remarks/>
  <skip>false</skip>
  <box_types>
    <box_type>Broadband</box_type>
    <box_type>Emulator</box_type>
    <box_type>RPI</box_type>
  </box_types>
  <rdk_versions>
    <rdk_version>RDKB</rdk_version>
  </rdk_versions>
  <test_cases>
    <test_case_id>TC_SYSUTIL_8</test_case_id>
    <test_objective>To check whether all the interfaces are up or not</test_objective>
    <test_type>Positive</test_type>
    <test_setup>Emulator,XB3,RPI</test_setup>
    <pre_requisite>TDK Agent should be in running state or invoke it through StartTdk.sh script</pre_requisite>
    <api_or_interface_used>None</api_or_interface_used>
    <input_parameters>None</input_parameters>
    <automation_approch>1.Function which needs to be tested will be configured in Test Manager GUI.
2.Python Script will be generated by Test Manager with provided arguments in configure page. 
3.TM will load the sysutil library via Test agent
4.From python script, invoke ExecuteCmd() stub function to get the interfaces from the platform property file
5.Using ExecuteCmd(), check if all the interfaces are up in device
5.Responses from the sysutil stub function will be logged in Agent Console log.
6.Test Manager will publish the result in GUI as PASS/FAILURE</automation_approch>
    <except_output>All interfaces should be up</except_output>
    <priority>High</priority>
    <test_stub_interface>sysutil</test_stub_interface>
    <test_script>TS_SANITY_Is_All_InterfaceUp</test_script>
    <skipped>No</skipped>
    <release_version>M59</release_version>
    <remarks/>
  </test_cases>
  <script_tags>
    <script_tag>BASIC</script_tag>
  </script_tags>
</xml>

'''
# use tdklib library,which provides a wrapper for tdk testcase script 
import tdklib; 
from tdkbVariables import *;

#Test component to be tested
obj = tdklib.TDKScriptingLibrary("sysutil","1");

#IP and Port of box, No need to change,
#This will be replaced with correspoing Box Ip and port while executing script
ip = <ipaddress>
port = <port>
obj.configureTestCase(ip,port,'TS_SANITY_Is_All_InterfaceUp');

#Get the result of connection with test component and STB
loadmodulestatus =obj.getLoadModuleResult();

if "SUCCESS" in loadmodulestatus.upper():
    #Set the result status of execution
    obj.setLoadModuleStatus("SUCCESS");

    tdkTestObj = obj.createTestStep('ExecuteCmd');
    cmd= "sh %s/tdk_utility.sh parseConfigFile INTERFACE_LIST" %TDK_PATH;
    print cmd;
    expectedresult="SUCCESS";
    tdkTestObj.addParameter("command", cmd);
    tdkTestObj.executeTestCase(expectedresult);
    actualresult = tdkTestObj.getResult();
    interfaceList = tdkTestObj.getResultDetails().strip();
    interfaceList = interfaceList.replace("\\n", "");
    if "Invalid Argument passed" not in interfaceList:
        tdkTestObj.setResultStatus("SUCCESS");
        print "TEST STEP 1: Get the list of interfaces ";
        print "EXPECTED RESULT 1: Should get the list of interfaces";
        print "ACTUAL RESULT 1: %s" %interfaceList;
        #Get the result of execution
        print "[TEST EXECUTION RESULT] : SUCCESS"

        interfaceList = interfaceList.split(",");
        for interfaceName in interfaceList:
	    if "wlan" in interfaceName:
		command = "ifconfig | grep -A 1 %s | grep inet6 | awk '{ print $3 }'| tr \"\n\" \" \"" %interfaceName
	    else:
		command = "ifconfig | grep -A 1 %s | grep inet | cut -f2 -d ':' | cut -f1 -d ' ' | tr \"\n\" \" \"" %interfaceName

            tdkTestObj.addParameter("command", command);

	    expectedresult="SUCCESS";
	    #Execute the test case in STB
    	    tdkTestObj.executeTestCase(expectedresult);
    	    actualresult = tdkTestObj.getResult();
    	    details = tdkTestObj.getResultDetails().strip();

    	    if expectedresult in actualresult and details:
    	        ip = details;
    	        #Set the result status of execution
    	        tdkTestObj.setResultStatus("SUCCESS");
    	        print "TEST STEP 1: Check if",interfaceName," is up"
    	        print "EXPECTED RESULT 1:",interfaceName," should be up";
    	        print "ACTUAL RESULT 1: ",interfaceName," is up with ip %s" %ip;
    	        #Get the result of execution
    	        print "[TEST EXECUTION RESULT] : SUCCESS";
	    else:
		ip = details;
                #Set the result status of execution
                tdkTestObj.setResultStatus("FAILURE");
                print "TEST STEP 1: Check if",interfaceName," is up"
                print "EXPECTED RESULT 1:",interfaceName," should be up";
                print "ACTUAL RESULT 1: ",interfaceName," is not up, details:%s"%details;
                #Get the result of execution
                print "[TEST EXECUTION RESULT] : FAILURE";
    else:
        tdkTestObj.setResultStatus("FAILURE");
        print "TEST STEP 1: Get the list of ccsp processes ";
        print "EXPECTED RESULT 1: Should get the list of ccsp processes";
        print "ACTUAL RESULT 1: %s" %interfaceList;
        #Get the result of execution
        print "[TEST EXECUTION RESULT] : FAILURE"

    obj.unloadModule("sysutil");
else:
        print "Failed to load sysutil module";
        obj.setLoadModuleStatus("FAILURE");
        print "Module loading failed";
